#!/usr/bin/env bash

MSdescr="Linear projection of modesA onto modesB"

MSextdescr="Project modesA (image cube) onto modesB (image cube)
modesB assumed to be orthogonal basis

Main steps:
- Decompose modesA according to basis B (decomposition coefficients are mcoeff)
- Use mcoeff and basis B to reconstruct projection of modesA onto modesB
- Compute the residual of the reconstruction = modesA - reconstruction

Output:
- projection
- reconstruction
"

source milk-script-std-config

RequiredCommands=( milk-all )
RequiredFiles=()
RequiredDirs=()


MSarg+=( "inmodesA:string:input modes to be decomposed" )
MSarg+=( "inmodesB:string:modes onto which to decompose" )
MSarg+=( "outimrec:string:reconstruction (projection)" )
MSarg+=( "outimres:string:residual" )

GPUindex="-1"
MSopt+=( "g:gpu:setgpu:GPU[int]:GPU index, -1 for CPU" )
function setgpu() {
	GPUindex="$1"
}


source milk-argparse


immA="${inputMSargARRAY[0]}"
immB="${inputMSargARRAY[1]}"
outimrec="${inputMSargARRAY[2]}"
outimres="${inputMSargARRAY[3]}"

milk-all << EOF
loadfits "$immA" modesA
loadfits "$immB" modesB
linalg.sgemm .GPUdevice ${GPUindex}
linalg.sgemm .transpA 1
linalg.sgemm modesA modesB mcoeff
linalg.sgemm .transpA 0
linalg.sgemm .transpB 1
linalg.sgemm modesB mcoeff imrec
saveFITS imrec "$outimrec"
imres=modesA-imrec
saveFITS imres "$outimres"
exitCLI
EOF


